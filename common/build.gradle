import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
    id 'java-library'
    id 'org.springframework.boot' apply false
    id 'io.spring.dependency-management'
    id 'org.openapi.generator' version '7.14.0'
}

group = 'by.imsha'
version = '0.0.1-SNAPSHOT'

repositories {
    mavenCentral()
}

java {
    sourceCompatibility = '21'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

dependencyManagement {
    imports {
        mavenBom(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES)
    }
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudDependenciesVersion}"
    }
}

dependencies {
    api 'org.springframework.data:spring-data-mongodb'
    api 'jakarta.validation:jakarta.validation-api'
    api 'jakarta.annotation:jakarta.annotation-api'
    api 'org.hibernate.validator:hibernate-validator'
    api 'com.fasterxml.jackson.core:jackson-annotations'
    api 'com.fasterxml.jackson.core:jackson-databind'
    api 'org.apache.commons:commons-lang3'
    api "org.springframework.cloud:spring-cloud-starter-openfeign"
    api "com.github.rutledgepaulv:rest-query-engine:${restQueryEngineVersion}"
    api "com.google.guava:guava:${guavaVersion}"
    api "org.cache2k:cache2k-api:${cache2kVersion}"
    api "org.cache2k:cache2k-core:${cache2kVersion}"
    api "org.cache2k:cache2k-spring:${cache2kVersion}"
    api project(':meilisearch:api')


    implementation 'org.projectlombok:lombok'
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}"

    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

sourceSets.main.java.srcDirs += "$buildDir/openapi/generated"

tasks.register('generate FusionAuth Secured API Feign client', GenerateTask) {
    generatorName.set("spring")
    inputSpec.set("$projectDir/openapi/fusion-auth/openapi-secured.yaml")
    outputDir.set("$buildDir/openapi/generated")
    ignoreFileOverride.set("$projectDir/.openapi-generator-ignore")
    configOptions.set([
            library                             : "spring-cloud",
            invokerPackage                      : "api_specification.by.imsha.common.fusionauth.secured_client",
            apiPackage                          : "api_specification.by.imsha.common.fusionauth.secured_client.api",
            modelPackage                        : "api_specification.by.imsha.common.fusionauth.secured_client.model",
            configPackage                       : "api_specification.by.imsha.common.fusionauth.secured_client.configuration",
            basePackage                         : "api_specification.by.imsha.common.fusionauth.secured_client",
            useOptional                         : "true",
            openApiNullable                     : "false",
            interfaceOnly                       : "false",
            sourceFolder                        : "",
            testOutput                          : "$rootDir/src/test/java",
            generateApiTests                    : "true",
            generateModelTests                  : "true",
            generateBuilders                    : "true",
            generatedConstructorWithRequiredArgs: "true",
            generateConstructorWithAllArgs      : "true",
            useTags                             : "true",
            useSpringBoot3                      : "true",
            useFeignClientContextId             : "false"
    ])
}

tasks.register('generate FusionAuth Public API Feign client', GenerateTask) {
    generatorName.set("spring")
    inputSpec.set("$projectDir/openapi/fusion-auth/openapi-public.yaml")
    outputDir.set("$buildDir/openapi/generated")
    ignoreFileOverride.set("$projectDir/.openapi-generator-ignore")
    configOptions.set([
            library                             : "spring-cloud",
            invokerPackage                      : "api_specification.by.imsha.common.fusionauth.public_client",
            apiPackage                          : "api_specification.by.imsha.common.fusionauth.public_client.api",
            modelPackage                        : "api_specification.by.imsha.common.fusionauth.public_client.model",
            configPackage                       : "api_specification.by.imsha.common.fusionauth.public_client.configuration",
            basePackage                         : "api_specification.by.imsha.common.fusionauth.public_client",
            useOptional                         : "true",
            openApiNullable                     : "false",
            interfaceOnly                       : "false",
            sourceFolder                        : "",
            testOutput                          : "$rootDir/src/test/java",
            generateApiTests                    : "true",
            generateModelTests                  : "true",
            generateBuilders                    : "true",
            generatedConstructorWithRequiredArgs: "true",
            generateConstructorWithAllArgs      : "true",
            useTags                             : "true",
            useSpringBoot3                      : "true",
            useFeignClientContextId             : "false"

    ])
}

tasks.withType(GenerateTask).each { task ->
    configure(task) {
        if (task.name != "openApiGenerate") {
            group = "generation"
        }
    }
}

tasks.register('generate all') {
    group = "generation"
    dependsOn tasks.matching { it.group == "generation" && it.name != "generate all" }
}

compileJava.dependsOn 'generate all'

test {
    useJUnitPlatform()
}